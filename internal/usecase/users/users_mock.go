// Code generated by MockGen. DO NOT EDIT.
// Source: dependencies.go

// Package usersuc is a generated GoMock package.
package usersuc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/qreaqtor/api-avito-shop/internal/models"
)

// MockrepoUser is a mock of repoUser interface.
type MockrepoUser struct {
	ctrl     *gomock.Controller
	recorder *MockrepoUserMockRecorder
}

// MockrepoUserMockRecorder is the mock recorder for MockrepoUser.
type MockrepoUserMockRecorder struct {
	mock *MockrepoUser
}

// NewMockrepoUser creates a new mock instance.
func NewMockrepoUser(ctrl *gomock.Controller) *MockrepoUser {
	mock := &MockrepoUser{ctrl: ctrl}
	mock.recorder = &MockrepoUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrepoUser) EXPECT() *MockrepoUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockrepoUser) CreateUser(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockrepoUserMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockrepoUser)(nil).CreateUser), ctx, user)
}

// GetPassword mocks base method.
func (m *MockrepoUser) GetPassword(ctx context.Context, username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword", ctx, username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockrepoUserMockRecorder) GetPassword(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockrepoUser)(nil).GetPassword), ctx, username)
}

// GetUser mocks base method.
func (m *MockrepoUser) GetUser(ctx context.Context, username string) (*models.UserRead, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, username)
	ret0, _ := ret[0].(*models.UserRead)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockrepoUserMockRecorder) GetUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockrepoUser)(nil).GetUser), ctx, username)
}

// TakeCoin mocks base method.
func (m *MockrepoUser) TakeCoin(ctx context.Context, username string, amount uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TakeCoin", ctx, username, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// TakeCoin indicates an expected call of TakeCoin.
func (mr *MockrepoUserMockRecorder) TakeCoin(ctx, username, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeCoin", reflect.TypeOf((*MockrepoUser)(nil).TakeCoin), ctx, username, amount)
}

// MockrepoItems is a mock of repoItems interface.
type MockrepoItems struct {
	ctrl     *gomock.Controller
	recorder *MockrepoItemsMockRecorder
}

// MockrepoItemsMockRecorder is the mock recorder for MockrepoItems.
type MockrepoItemsMockRecorder struct {
	mock *MockrepoItems
}

// NewMockrepoItems creates a new mock instance.
func NewMockrepoItems(ctrl *gomock.Controller) *MockrepoItems {
	mock := &MockrepoItems{ctrl: ctrl}
	mock.recorder = &MockrepoItemsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrepoItems) EXPECT() *MockrepoItemsMockRecorder {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockrepoItems) AddItem(arg0 context.Context, arg1 *models.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddItem indicates an expected call of AddItem.
func (mr *MockrepoItemsMockRecorder) AddItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockrepoItems)(nil).AddItem), arg0, arg1)
}

// GetItems mocks base method.
func (m *MockrepoItems) GetItems(ctx context.Context, username string) ([]*models.InventoryItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems", ctx, username)
	ret0, _ := ret[0].([]*models.InventoryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockrepoItemsMockRecorder) GetItems(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockrepoItems)(nil).GetItems), ctx, username)
}

// MockrepoMerch is a mock of repoMerch interface.
type MockrepoMerch struct {
	ctrl     *gomock.Controller
	recorder *MockrepoMerchMockRecorder
}

// MockrepoMerchMockRecorder is the mock recorder for MockrepoMerch.
type MockrepoMerchMockRecorder struct {
	mock *MockrepoMerch
}

// NewMockrepoMerch creates a new mock instance.
func NewMockrepoMerch(ctrl *gomock.Controller) *MockrepoMerch {
	mock := &MockrepoMerch{ctrl: ctrl}
	mock.recorder = &MockrepoMerchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrepoMerch) EXPECT() *MockrepoMerchMockRecorder {
	return m.recorder
}

// GetPrice mocks base method.
func (m *MockrepoMerch) GetPrice(ctx context.Context, merch string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice", ctx, merch)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockrepoMerchMockRecorder) GetPrice(ctx, merch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockrepoMerch)(nil).GetPrice), ctx, merch)
}

// MockrepoTransactions is a mock of repoTransactions interface.
type MockrepoTransactions struct {
	ctrl     *gomock.Controller
	recorder *MockrepoTransactionsMockRecorder
}

// MockrepoTransactionsMockRecorder is the mock recorder for MockrepoTransactions.
type MockrepoTransactionsMockRecorder struct {
	mock *MockrepoTransactions
}

// NewMockrepoTransactions creates a new mock instance.
func NewMockrepoTransactions(ctrl *gomock.Controller) *MockrepoTransactions {
	mock := &MockrepoTransactions{ctrl: ctrl}
	mock.recorder = &MockrepoTransactionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrepoTransactions) EXPECT() *MockrepoTransactionsMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockrepoTransactions) CreateTransaction(arg0 context.Context, arg1 *models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockrepoTransactionsMockRecorder) CreateTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockrepoTransactions)(nil).CreateTransaction), arg0, arg1)
}

// GetUserCoinHistory mocks base method.
func (m *MockrepoTransactions) GetUserCoinHistory(ctx context.Context, username string) (*models.History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCoinHistory", ctx, username)
	ret0, _ := ret[0].(*models.History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCoinHistory indicates an expected call of GetUserCoinHistory.
func (mr *MockrepoTransactionsMockRecorder) GetUserCoinHistory(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCoinHistory", reflect.TypeOf((*MockrepoTransactions)(nil).GetUserCoinHistory), ctx, username)
}

// MocktokenManager is a mock of tokenManager interface.
type MocktokenManager struct {
	ctrl     *gomock.Controller
	recorder *MocktokenManagerMockRecorder
}

// MocktokenManagerMockRecorder is the mock recorder for MocktokenManager.
type MocktokenManagerMockRecorder struct {
	mock *MocktokenManager
}

// NewMocktokenManager creates a new mock instance.
func NewMocktokenManager(ctrl *gomock.Controller) *MocktokenManager {
	mock := &MocktokenManager{ctrl: ctrl}
	mock.recorder = &MocktokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktokenManager) EXPECT() *MocktokenManagerMockRecorder {
	return m.recorder
}

// CheckPassword mocks base method.
func (m *MocktokenManager) CheckPassword(hashedPassword, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MocktokenManagerMockRecorder) CheckPassword(hashedPassword, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MocktokenManager)(nil).CheckPassword), hashedPassword, password)
}

// GenerateToken mocks base method.
func (m *MocktokenManager) GenerateToken(username string) (*models.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username)
	ret0, _ := ret[0].(*models.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MocktokenManagerMockRecorder) GenerateToken(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MocktokenManager)(nil).GenerateToken), username)
}

// GetHashedPassword mocks base method.
func (m *MocktokenManager) GetHashedPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashedPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHashedPassword indicates an expected call of GetHashedPassword.
func (mr *MocktokenManagerMockRecorder) GetHashedPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashedPassword", reflect.TypeOf((*MocktokenManager)(nil).GetHashedPassword), password)
}

// MocktransactionManager is a mock of transactionManager interface.
type MocktransactionManager struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionManagerMockRecorder
}

// MocktransactionManagerMockRecorder is the mock recorder for MocktransactionManager.
type MocktransactionManagerMockRecorder struct {
	mock *MocktransactionManager
}

// NewMocktransactionManager creates a new mock instance.
func NewMocktransactionManager(ctrl *gomock.Controller) *MocktransactionManager {
	mock := &MocktransactionManager{ctrl: ctrl}
	mock.recorder = &MocktransactionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionManager) EXPECT() *MocktransactionManagerMockRecorder {
	return m.recorder
}

// RunRepeatableRead mocks base method.
func (m *MocktransactionManager) RunRepeatableRead(ctx context.Context, fx func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunRepeatableRead", ctx, fx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunRepeatableRead indicates an expected call of RunRepeatableRead.
func (mr *MocktransactionManagerMockRecorder) RunRepeatableRead(ctx, fx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunRepeatableRead", reflect.TypeOf((*MocktransactionManager)(nil).RunRepeatableRead), ctx, fx)
}
